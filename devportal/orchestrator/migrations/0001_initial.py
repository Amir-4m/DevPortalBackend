# Generated by Django 4.0.8 on 2023-07-13 18:36

from django.db import migrations, models
import django.db.models.deletion
import picklefield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the Account.', max_length=255)),
                ('creds', models.TextField(help_text='Credentials required to access the account.', verbose_name='Credentials')),
                ('url', models.URLField(help_text='URL of the account.', verbose_name='URL')),
            ],
            options={
                'verbose_name': 'Account',
                'verbose_name_plural': 'Accounts',
            },
        ),
        migrations.CreateModel(
            name='Component',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the Component.', max_length=255)),
                ('description', models.CharField(blank=True, help_text='A description for the Component.', max_length=255, null=True)),
                ('version', models.CharField(help_text='The version of the component.', max_length=255)),
                ('systems', models.CharField(blank=True, help_text='The systems the component is compatible with.', max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'component',
                'verbose_name_plural': 'components',
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the Customer.', max_length=255)),
            ],
            options={
                'verbose_name': 'customer',
                'verbose_name_plural': 'customers',
            },
        ),
        migrations.CreateModel(
            name='GitRepo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the local_url.', max_length=255)),
                ('source_type', models.CharField(choices=[('github', 'GitHub'), ('codecommit', 'CodeCommit'), ('local', 'Local Filesystem')], help_text='Indicates the type of source code repository.', max_length=10, verbose_name='Source Type')),
                ('url', models.CharField(help_text='URL of the repository.', max_length=255, verbose_name='URL')),
                ('local_url', models.CharField(blank=True, default='', help_text='URL of the repository.', max_length=255, verbose_name='temp dir')),
                ('state', models.CharField(default='new', help_text='Internal state of the local_url', max_length=16, verbose_name='Repo State')),
                ('account', models.ForeignKey(help_text='WHich accounts is used to connect to the service?', max_length=10, on_delete=django.db.models.deletion.PROTECT, to='orchestrator.account')),
            ],
            options={
                'verbose_name': 'Git Repository',
                'verbose_name_plural': 'Git Repositories',
            },
        ),
        migrations.CreateModel(
            name='Organisation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the Organisation.', max_length=255)),
                ('parent', models.ForeignKey(blank=True, help_text='Parent organisation of this organisation.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_query_name='sub_organisations', to='orchestrator.organisation')),
            ],
            options={
                'verbose_name': 'Organisation',
                'verbose_name_plural': 'Organisations',
            },
        ),
        migrations.CreateModel(
            name='ProjectConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the ProjectConfig.', max_length=255)),
            ],
            options={
                'verbose_name': 'project configuration',
                'verbose_name_plural': 'project configurations',
            },
        ),
        migrations.CreateModel(
            name='Settings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=100, unique=True, verbose_name='Key')),
                ('value', picklefield.fields.PickledObjectField(editable=False, verbose_name='value')),
                ('data_type', models.CharField(choices=[('str', 'STR'), ('int', 'INT'), ('float', 'FLOAT'), ('list', 'LIST'), ('dict', 'DICT'), ('bool', 'BOOL')], max_length=10, verbose_name='value data type')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectConfigurationComponent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('component', models.ForeignKey(help_text='Which components do you wish to include?', on_delete=django.db.models.deletion.PROTECT, related_name='config_components', to='orchestrator.component')),
                ('config', models.ForeignKey(help_text='Select which configuration the project will use to render its files.', on_delete=django.db.models.deletion.PROTECT, to='orchestrator.projectconfiguration', verbose_name='Configuration Template')),
                ('setting', models.ForeignKey(blank=True, help_text='The settings of the component.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='config_components', to='orchestrator.settings')),
            ],
            options={
                'verbose_name': 'project configuration component',
                'verbose_name_plural': 'project configuration components',
            },
        ),
        migrations.AddField(
            model_name='projectconfiguration',
            name='components',
            field=models.ManyToManyField(help_text='Which components do you wish to include?', through='orchestrator.ProjectConfigurationComponent', to='orchestrator.component'),
        ),
        migrations.AddField(
            model_name='projectconfiguration',
            name='customer',
            field=models.ForeignKey(help_text='The customer the project configuration belongs to.', on_delete=django.db.models.deletion.CASCADE, to='orchestrator.customer'),
        ),
        migrations.AddField(
            model_name='projectconfiguration',
            name='organisation',
            field=models.ForeignKey(help_text='The organisation the project configuration belongs to.', on_delete=django.db.models.deletion.CASCADE, to='orchestrator.organisation'),
        ),
        migrations.AddField(
            model_name='projectconfiguration',
            name='settings',
            field=models.ManyToManyField(blank=True, help_text='The settings of the project configuration.', related_name='projectconfig', to='orchestrator.settings'),
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the Project.', max_length=255)),
                ('config', models.ForeignKey(help_text='Select which configuration the project will use to render its files.', on_delete=django.db.models.deletion.PROTECT, to='orchestrator.projectconfiguration', verbose_name='Configuration Template')),
                ('customer', models.ForeignKey(help_text='The customer the project belongs to.', on_delete=django.db.models.deletion.CASCADE, to='orchestrator.customer')),
            ],
            options={
                'verbose_name': 'project',
                'verbose_name_plural': 'projects',
            },
        ),
        migrations.CreateModel(
            name='Pipeline',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the Pipeline.', max_length=255)),
                ('source_type', models.CharField(choices=[('tf_cloud', 'TF Cloud'), ('codepipeline', 'CodePipeline'), ('mobile_build', 'Mobile Build'), ('local_build', 'Local Build')], help_text='Indicates the type of pipeline source.', max_length=20, verbose_name='Source Type')),
                ('url', models.URLField(help_text='URL or ID of the pipeline.', verbose_name='URL')),
                ('account', models.ForeignKey(help_text='WHich accounts is used to connect to the service?', max_length=10, on_delete=django.db.models.deletion.PROTECT, related_name='pipeline', to='orchestrator.account')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='pipelines', to='orchestrator.project')),
                ('repo', models.ForeignKey(blank=True, help_text='The repo for the feature.', null=True, on_delete=django.db.models.deletion.PROTECT, to='orchestrator.gitrepo')),
            ],
            options={
                'verbose_name': 'Pipeline',
                'verbose_name_plural': 'Pipelines',
            },
        ),
        migrations.AddField(
            model_name='organisation',
            name='settings',
            field=models.ManyToManyField(blank=True, help_text='Settings for the organisation.', related_query_name='organisation', to='orchestrator.settings'),
        ),
        migrations.AddField(
            model_name='customer',
            name='organisation',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='orchestrator.organisation'),
        ),
        migrations.AddField(
            model_name='customer',
            name='settings',
            field=models.ManyToManyField(blank=True, help_text='Settings for the customers.', related_name='Settings', related_query_name='customer', to='orchestrator.settings'),
        ),
        migrations.AddField(
            model_name='component',
            name='repo',
            field=models.ForeignKey(blank=True, help_text='The local_url for the component.', null=True, on_delete=django.db.models.deletion.PROTECT, to='orchestrator.gitrepo'),
        ),
        migrations.AddField(
            model_name='component',
            name='requires_component',
            field=models.ManyToManyField(blank=True, help_text='The components required by this component.', to='orchestrator.component'),
        ),
        migrations.AddField(
            model_name='account',
            name='organisation',
            field=models.ForeignKey(help_text='Organisation to which this account belongs.', on_delete=django.db.models.deletion.CASCADE, related_query_name='accounts', to='orchestrator.organisation'),
        ),
        migrations.AddField(
            model_name='account',
            name='settings',
            field=models.ManyToManyField(blank=True, help_text='Settings for the account.', related_query_name='account', to='orchestrator.settings'),
        ),
    ]
